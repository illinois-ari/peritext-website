/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from '@payloadcms/db-sqlite/drizzle/sqlite-core'
import { sql, relations } from '@payloadcms/db-sqlite/drizzle'

export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text('email').notNull(),
    resetPasswordToken: text('reset_password_token'),
    resetPasswordExpiration: text('reset_password_expiration').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text('salt'),
    hash: text('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: text('lock_until').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = sqliteTable(
  'media',
  {
    id: integer('id').primaryKey(),
    alt: text('alt'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text('url'),
    thumbnailURL: text('thumbnail_u_r_l'),
    filename: text('filename'),
    mimeType: text('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: text('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: text('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: text('sizes_thumbnail_filename'),
    sizes_medium_url: text('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: text('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: text('sizes_medium_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
  }),
)

export const page_settings = sqliteTable(
  'page_settings',
  {
    id: integer('id').primaryKey(),
    page: text('page', { enum: ['home', 'about', 'contact', 'team', 'blog', 'data'] }).notNull(),
    title: text('title').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    page_settings_page_idx: uniqueIndex('page_settings_page_idx').on(columns.page),
    page_settings_updated_at_idx: index('page_settings_updated_at_idx').on(columns.updatedAt),
    page_settings_created_at_idx: index('page_settings_created_at_idx').on(columns.createdAt),
  }),
)

export const team_members = sqliteTable(
  'team_members',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    sortOrder: numeric('sort_order').notNull(),
    name: text('name').notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    description: text('description', { mode: 'json' }).notNull(),
    social: text('social'),
  },
  (columns) => ({
    _orderIdx: index('team_members_order_idx').on(columns._order),
    _parentIDIdx: index('team_members_parent_id_idx').on(columns._parentID),
    team_members_image_idx: index('team_members_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [team.id],
      name: 'team_members_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const team = sqliteTable(
  'team',
  {
    id: integer('id').primaryKey(),
    sortOrder: numeric('sort_order').notNull(),
    title: text('title').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    team_sort_order_idx: uniqueIndex('team_sort_order_idx').on(columns.sortOrder),
    team_updated_at_idx: index('team_updated_at_idx').on(columns.updatedAt),
    team_created_at_idx: index('team_created_at_idx').on(columns.createdAt),
  }),
)

export const about = sqliteTable(
  'about',
  {
    id: integer('id').primaryKey(),
    order: numeric('order').notNull(),
    type: text('type', { enum: ['text', 'image'] }).notNull(),
    content: text('content', { mode: 'json' }),
    image_file: integer('image_file_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    image_alt: text('image_alt'),
    image_align: text('image_align', { enum: ['left', 'right'] }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    about_order_idx: uniqueIndex('about_order_idx').on(columns.order),
    about_image_image_file_idx: index('about_image_image_file_idx').on(columns.image_file),
    about_updated_at_idx: index('about_updated_at_idx').on(columns.updatedAt),
    about_created_at_idx: index('about_created_at_idx').on(columns.createdAt),
  }),
)

export const contact = sqliteTable(
  'contact',
  {
    id: integer('id').primaryKey(),
    displayTitle: text('display_title'),
    type: text('type', { enum: ['text-block', 'contact'] }).notNull(),
    sortOrder: numeric('sort_order').notNull(),
    body: text('body', { mode: 'json' }),
    contact_name: text('contact_name'),
    contact_position: text('contact_position'),
    contact_institution: text('contact_institution'),
    contact_email: text('contact_email'),
    contact_image: integer('contact_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    contact_sort_order_idx: uniqueIndex('contact_sort_order_idx').on(columns.sortOrder),
    contact_contact_contact_image_idx: index('contact_contact_contact_image_idx').on(
      columns.contact_image,
    ),
    contact_updated_at_idx: index('contact_updated_at_idx').on(columns.updatedAt),
    contact_created_at_idx: index('contact_created_at_idx').on(columns.createdAt),
  }),
)

export const blog_keywords = sqliteTable(
  'blog_keywords',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    keyword: text('keyword').notNull(),
  },
  (columns) => ({
    _orderIdx: index('blog_keywords_order_idx').on(columns._order),
    _parentIDIdx: index('blog_keywords_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [blog.id],
      name: 'blog_keywords_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const blog = sqliteTable(
  'blog',
  {
    id: integer('id').primaryKey(),
    title: text('title').notNull(),
    author: text('author').notNull(),
    datePosted: text('date_posted')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    shortDescription: text('short_description', { mode: 'json' }).notNull(),
    longDescription: text('long_description', { mode: 'json' }).notNull(),
    slug: text('slug').notNull(),
    readTime: numeric('read_time').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    blog_slug_idx: uniqueIndex('blog_slug_idx').on(columns.slug),
    blog_updated_at_idx: index('blog_updated_at_idx').on(columns.updatedAt),
    blog_created_at_idx: index('blog_created_at_idx').on(columns.createdAt),
  }),
)

export const home = sqliteTable(
  'home',
  {
    id: integer('id').primaryKey(),
    content: text('content', { mode: 'json' }).notNull(),
    maxUpdates: numeric('max_updates').notNull().default('3'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    home_updated_at_idx: index('home_updated_at_idx').on(columns.updatedAt),
    home_created_at_idx: index('home_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = sqliteTable(
  'payload_locked_documents',
  {
    id: integer('id').primaryKey(),
    globalSlug: text('global_slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = sqliteTable(
  'payload_locked_documents_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    'page-settingsID': integer('page_settings_id'),
    teamID: integer('team_id'),
    aboutID: integer('about_id'),
    contactID: integer('contact_id'),
    blogID: integer('blog_id'),
    homeID: integer('home_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_page_settings_id_idx: index(
      'payload_locked_documents_rels_page_settings_id_idx',
    ).on(columns['page-settingsID']),
    payload_locked_documents_rels_team_id_idx: index(
      'payload_locked_documents_rels_team_id_idx',
    ).on(columns.teamID),
    payload_locked_documents_rels_about_id_idx: index(
      'payload_locked_documents_rels_about_id_idx',
    ).on(columns.aboutID),
    payload_locked_documents_rels_contact_id_idx: index(
      'payload_locked_documents_rels_contact_id_idx',
    ).on(columns.contactID),
    payload_locked_documents_rels_blog_id_idx: index(
      'payload_locked_documents_rels_blog_id_idx',
    ).on(columns.blogID),
    payload_locked_documents_rels_home_id_idx: index(
      'payload_locked_documents_rels_home_id_idx',
    ).on(columns.homeID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    'page-settingsIdFk': foreignKey({
      columns: [columns['page-settingsID']],
      foreignColumns: [page_settings.id],
      name: 'payload_locked_documents_rels_page_settings_fk',
    }).onDelete('cascade'),
    teamIdFk: foreignKey({
      columns: [columns['teamID']],
      foreignColumns: [team.id],
      name: 'payload_locked_documents_rels_team_fk',
    }).onDelete('cascade'),
    aboutIdFk: foreignKey({
      columns: [columns['aboutID']],
      foreignColumns: [about.id],
      name: 'payload_locked_documents_rels_about_fk',
    }).onDelete('cascade'),
    contactIdFk: foreignKey({
      columns: [columns['contactID']],
      foreignColumns: [contact.id],
      name: 'payload_locked_documents_rels_contact_fk',
    }).onDelete('cascade'),
    blogIdFk: foreignKey({
      columns: [columns['blogID']],
      foreignColumns: [blog.id],
      name: 'payload_locked_documents_rels_blog_fk',
    }).onDelete('cascade'),
    homeIdFk: foreignKey({
      columns: [columns['homeID']],
      foreignColumns: [home.id],
      name: 'payload_locked_documents_rels_home_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = sqliteTable(
  'payload_preferences',
  {
    id: integer('id').primaryKey(),
    key: text('key'),
    value: text('value', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = sqliteTable(
  'payload_preferences_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = sqliteTable(
  'payload_migrations',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    batch: numeric('batch'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_page_settings = relations(page_settings, () => ({}))
export const relations_team_members = relations(team_members, ({ one }) => ({
  _parentID: one(team, {
    fields: [team_members._parentID],
    references: [team.id],
    relationName: 'members',
  }),
  image: one(media, {
    fields: [team_members.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_team = relations(team, ({ many }) => ({
  members: many(team_members, {
    relationName: 'members',
  }),
}))
export const relations_about = relations(about, ({ one }) => ({
  image_file: one(media, {
    fields: [about.image_file],
    references: [media.id],
    relationName: 'image_file',
  }),
}))
export const relations_contact = relations(contact, ({ one }) => ({
  contact_image: one(media, {
    fields: [contact.contact_image],
    references: [media.id],
    relationName: 'contact_image',
  }),
}))
export const relations_blog_keywords = relations(blog_keywords, ({ one }) => ({
  _parentID: one(blog, {
    fields: [blog_keywords._parentID],
    references: [blog.id],
    relationName: 'keywords',
  }),
}))
export const relations_blog = relations(blog, ({ many }) => ({
  keywords: many(blog_keywords, {
    relationName: 'keywords',
  }),
}))
export const relations_home = relations(home, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    'page-settingsID': one(page_settings, {
      fields: [payload_locked_documents_rels['page-settingsID']],
      references: [page_settings.id],
      relationName: 'page-settings',
    }),
    teamID: one(team, {
      fields: [payload_locked_documents_rels.teamID],
      references: [team.id],
      relationName: 'team',
    }),
    aboutID: one(about, {
      fields: [payload_locked_documents_rels.aboutID],
      references: [about.id],
      relationName: 'about',
    }),
    contactID: one(contact, {
      fields: [payload_locked_documents_rels.contactID],
      references: [contact.id],
      relationName: 'contact',
    }),
    blogID: one(blog, {
      fields: [payload_locked_documents_rels.blogID],
      references: [blog.id],
      relationName: 'blog',
    }),
    homeID: one(home, {
      fields: [payload_locked_documents_rels.homeID],
      references: [home.id],
      relationName: 'home',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  users: typeof users
  media: typeof media
  page_settings: typeof page_settings
  team_members: typeof team_members
  team: typeof team
  about: typeof about
  contact: typeof contact
  blog_keywords: typeof blog_keywords
  blog: typeof blog
  home: typeof home
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_page_settings: typeof relations_page_settings
  relations_team_members: typeof relations_team_members
  relations_team: typeof relations_team
  relations_about: typeof relations_about
  relations_contact: typeof relations_contact
  relations_blog_keywords: typeof relations_blog_keywords
  relations_blog: typeof relations_blog
  relations_home: typeof relations_home
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-sqlite/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
